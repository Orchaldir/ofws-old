use crate::data::generator::Generator;
use crate::data::map::generation::GenerationStep;
use crate::data::map::Map2d;

/// Adds the values generated by a [`Generator`] to an [`Attribute`].
pub struct AddGeneratorStep {
    attribute_id: usize,
    generator: Box<dyn Generator>,
}

impl AddGeneratorStep {
    pub fn new(attribute_id: usize, generator: Box<dyn Generator>) -> AddGeneratorStep {
        AddGeneratorStep {
            attribute_id,
            generator,
        }
    }
}

impl GenerationStep for AddGeneratorStep {
    // Executes the step.
    ///
    /// ```
    ///# use ofws_core::data::generator::IndexGenerator;
    ///# use ofws_core::data::map::Map2d;
    ///# use ofws_core::data::map::generation::generator::AddGeneratorStep;
    ///# use ofws_core::data::map::generation::GenerationStep;
    ///# use ofws_core::data::size2d::Size2d;
    /// let size = Size2d::new(2, 3);
    /// let mut map = Map2d::new(size);
    /// let attribute_id = map.create_attribute("elevation", 40).unwrap();
    /// let generator = Box::new(IndexGenerator::new(size));
    /// let step = AddGeneratorStep::new(attribute_id, generator);
    ///
    /// step.execute(&mut map);
    ///
    /// let attribute = map.get_attribute(attribute_id);
    /// assert_eq!(attribute.get(0), 40);
    /// assert_eq!(attribute.get(1), 41);
    /// assert_eq!(attribute.get(2), 42);
    /// assert_eq!(attribute.get(3), 43);
    /// assert_eq!(attribute.get(4), 44);
    /// assert_eq!(attribute.get(5), 45);
    /// ```
    fn execute(&self, map: &mut Map2d) {
        info!(
            "Add generator to attribute '{}' of map '{}'",
            map.get_attribute(self.attribute_id).get_name(),
            map.get_name()
        );

        let size = map.size;
        let attribute = map.get_attribute_mut(self.attribute_id);
        let mut index = 0;

        for y in 0..size.height() {
            for x in 0..size.width() {
                let value = self.generator.generate(x, y);
                let sum = attribute.get(index).saturating_add(value);
                *attribute.get_mut(index) = sum;
                index += 1;
            }
        }
    }
}
