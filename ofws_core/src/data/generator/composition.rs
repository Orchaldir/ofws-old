use crate::data::generator::Generator;

/// Returns the maximum value generated by one or more generators.
pub struct MaxGenerator {
    generators: Vec<Box<dyn Generator>>,
}

impl MaxGenerator {
    pub fn new(generators: Vec<Box<dyn Generator>>) -> MaxGenerator {
        MaxGenerator { generators }
    }
}

impl Generator for MaxGenerator {
    /// Returns the maximum value generated by one or more generators.
    ///
    /// ```
    ///# use ofws_core::data::generator::{Generator, MockGenerator};
    ///# use ofws_core::data::generator::composition::MaxGenerator;
    /// let generator0 = Box::new(MockGenerator::new(3, 4, 11));
    /// let generator1 = Box::new(MockGenerator::new(3, 4, 22));
    /// let generator = MaxGenerator::new(vec![generator0, generator1]);
    ///
    /// assert_eq!(generator.generate(0, 0), 0);
    /// assert_eq!(generator.generate(10, 0), 0);
    /// assert_eq!(generator.generate(0, 20), 0);
    /// assert_eq!(generator.generate(123, 345), 0);
    /// assert_eq!(generator.generate(3, 4), 22);
    /// ```
    fn generate(&self, x: u32, y: u32) -> u8 {
        self.generators
            .iter()
            .map(|g| g.generate(x, y))
            .max()
            .unwrap_or(0)
    }
}

/// Returns the sum generated by one or more generators.
pub struct SumGenerator {
    generators: Vec<Box<dyn Generator>>,
}

impl SumGenerator {
    pub fn new(generators: Vec<Box<dyn Generator>>) -> SumGenerator {
        SumGenerator { generators }
    }
}

impl Generator for SumGenerator {
    /// Returns the sum generated by one or more generators.
    ///
    /// ```
    ///# use ofws_core::data::generator::{Generator, MockGenerator};
    ///# use ofws_core::data::generator::composition::SumGenerator;
    /// let generator0 = Box::new(MockGenerator::new(3, 4, 11));
    /// let generator1 = Box::new(MockGenerator::new(3, 4, 22));
    /// let generator = SumGenerator::new(vec![generator0, generator1]);
    ///
    /// assert_eq!(generator.generate(0, 0), 0);
    /// assert_eq!(generator.generate(10, 0), 0);
    /// assert_eq!(generator.generate(0, 20), 0);
    /// assert_eq!(generator.generate(123, 345), 0);
    /// assert_eq!(generator.generate(3, 4), 33);
    /// ```
    fn generate(&self, x: u32, y: u32) -> u8 {
        self.generators
            .iter()
            .map(|g| g.generate(x, y))
            .fold(0u8, |sum, value| sum.saturating_add(value))
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::data::generator::MockGenerator;

    #[test]
    fn test_sum_generator_with_overflow() {
        let generator0 = Box::new(MockGenerator::new(3, 4, 100));
        let generator1 = Box::new(MockGenerator::new(3, 4, 200));

        let generator = SumGenerator::new(vec![generator0, generator1]);

        assert_eq!(generator.generate(3, 4), u8::max_value());
    }
}
